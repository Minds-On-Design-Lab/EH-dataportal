const renderTable = () => {

        console.log("** renderTable");
        
        const groupColumnYear = 0
        const groupColumnGeo = 1;
        const groupId = 0

        const filteredTableData = 
            fullDataTableObjects
            .filter(d => selectedSummaryYears.includes(d.Time) && selectedSummaryGeography.includes(d.GeoType))

        // console.log("filteredTableData [renderTable]", filteredTableData);

        const measureAlignMap = new Map();
        // const measureImputeMap = new Map();
        const measures = [...new Set(filteredTableData.map(d => d.MeasurementDisplay))];

        measures.forEach((m) => {

            measureAlignMap.set(m, "r")
            // measureImputeMap.set(m, () => "-")

        });

        const measureAlignObj = Object.fromEntries(measureAlignMap);
        // const measureImputeObj = Object.fromEntries(measureImputeMap);

        // console.log("measureAlignObj", measureAlignObj);
        // console.log("measureImputeObj", measureImputeObj);
        
        const filteredTableAqData = aq.from(filteredTableData)
            .groupby("Time", "GeoType", "GeoID", "GeoRank", "Geography")
            .pivot("MeasurementDisplay", "DisplayCI")

            // need to put this down here because the data might be missing one of the measures, which will be undefined after the pivot
            // .impute(measureImputeObj) 

            // these 4 columns always exist, and we always want to hide them, so let's put them first, respecting the original relative order
            .relocate(["Time", "GeoType", "GeoID", "GeoRank"], { before: 0 }) 

        // console.log("filteredTableAqData [renderTable]");
        // filteredTableAqData.print({limit: 400})
        
        // export Arquero table to HTML
        
        document.getElementById('summary-table').innerHTML = 
            filteredTableAqData.toHTML({
                limit: Infinity,
                align: measureAlignObj, 
                null: () => "-" // use this to replace undefined
            });

        // this gives the table an ID (table code generated by Arquero)

        document.querySelector('#summary-table table').id = "tableID"

        // set some display properties 
        document.querySelector('#summary-table table').className = "cell-border stripe"
        document.querySelector('#summary-table table').width = "100%"
        
        // call function to show table

        $('#tableID').DataTable({
            scrollY: 500,
            scrollX: true,
            scrollCollapse: true,
            searching: false,
            paging: false,
            bInfo: false,
            fixedHeader: true,
            orderFixed: [ 3, 'asc' ], // GeoRank
            columnDefs: [
                { targets: [0, 1, 2, 3], visible: false}
            ],
            "createdRow": function ( row, data, index ) {
                // console.log('RENDER TABLE FUNCTION - CreatedRow')
                const time    = data[0];
                const geoType = data[1];
                if (time && geoType) {
                    row.setAttribute(`data-group`, `${time}-${geoType}`)
                    row.setAttribute(`data-year`, `${time}`);
                }
            },
            "drawCallback": function ( settings ) {
                // console.log('RENDER TABLE FUNCTION - DrawCallback')
                const api = this.api();
                const data = api.rows( {page:'current'} ).data()
                const rows = api.rows( {page:'current'} ).nodes();
                const totaleColumnsCount = api.columns().count()
                const visibleColumnsCount =  totaleColumnsCount - 4;
                
                let last = null;
                let lastYr = null;

                const createGroupRow = (groupColumn, lvl) => {

                    api.column(groupColumn, {page:'current'} ).data().each( function ( group, i ) {

                        const year = data[i][0]
                        const groupName = `${year}-${group}`

                        if ( last !== group || lastYr !== year ) {

                            $(rows).eq( i ).before(
                                `<tr class="group"><td colspan="${visibleColumnsCount}" data-year="${year}" data-group="${group}" data-group-level="${lvl}"> ${group}</td></tr>`
                                );
                                last = group;
                                lastYr = year

                            }
                        });
                    }
                    
                    createGroupRow(groupColumnYear, 0);
                    createGroupRow(groupColumnGeo, 1);
                    handleToggle();
                }
            })
        }